//conversion of infix expression to prefix expression
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>
#define size 100
char stack[size];
int top=-1;
void push(char item)
{
    if(top==size-1)
    {
        printf("stack overflow occured\n");
    }
    else
    {
        top=top+1;
        stack[top]=item;
       
    }
}
char pop()
{
    char t;
    if(top==-1)
    {
        printf("stack underflow occured\n");
    }
    else
    {
        t=stack[top];
        top=top-1;
        return(t);
    }
}
int isoperator(char item)
{
    if(item=='%'||item=='^'||item=='*'||item=='/'||item=='+'||item=='-')
    {
        return(1);
    }
    else
    {
        return(0);
    }
}
int precedence(char item)
{
    if(item=='%'||item=='^')
    {
        return(3);
    }
    else if(item=='*'||item=='/')
    {
        return(2);
    }
    else if(item=='+'||item=='-')
    {
        return(1);
    }
    else
    {
        return(0);
    }
}
void infixtopostfix(char infix[], char postfix[])
{
int i, j;
char item;
char x;

push('(');                            
strcat(infix,")");                  

i=0;
j=0;
item=infix[i];        

while(item != '\0')        
{
if(item == '(')
{
push(item);
}
else if( isdigit(item) || isalpha(item))
{
postfix[j] = item;              
j++;
}
else if(isoperator(item) == 1)      
{
x=pop();
while(isoperator(x) == 1 && precedence(x)>= precedence(item))
{
postfix[j] = x;                  
j++;
x = pop();                
}
push(x);
push(item);            
}
else if(item == ')')        
{
x = pop();                  
while(x != '(')              
{
postfix[j] = x;
j++;
x = pop();
}
}
else
{ break;
}
i++;
        item = infix[i];
}
    postfix[j] = '\0';
}
void reverse(char infix[],char t[])  
{            
    int p=0,q=0;
    while(infix[p]!='\0')  
    {              
        p++;        
    }              
    p--;          
    while(p>=0)  
    {
        if(infix[p]==')')  
        {                
            t[q]='(';
            p--;
            q++;
        }          
        else if(infix[p]=='(')    
        {                
            t[q]=')';
            p--;
            q++;
        }        
        else      
        {        
            t[q]=infix[p];    
            p--;
            q++;
        }          
    }        
    t[q++]='\0';      
}     
void main()
{
    char infix[size],postfix[size],t[size],prefix[size];
    printf("enter infix expression\n");
    gets(infix);
    reverse(infix,t);            
    infixtopostfix(t,postfix);  
    reverse(postfix,prefix);    
    printf("infix expression is: ");  
    puts(infix);                      
    printf("prefix expression is:");  
    puts(prefix);
}
